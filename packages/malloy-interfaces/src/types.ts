/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/*
 * Autogenerated.
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
export type Aggregate = {
  items: Array<AggregateOperation>;
  annotations?: Array<TagOrAnnotation>;
};
export type AggregateOperation = {
  name?: string;
  field: Field;
};
export type Annotation = {
  value: string;
};
export type AnonymousQueryInfo = {
  schema: Schema;
  annotations?: Array<Annotation>;
  definition?: Query;
  code?: string;
  location?: Location;
};
export type ArrayCell = {
  array_value: Array<Cell>;
};
export type ArrayType = {
  element_type: AtomicType;
};
export enum AtomicTypeType {
  StringType = 'string_type',
  BooleanType = 'boolean_type',
  NumberType = 'number_type',
  JSONType = 'json_type',
  SQLNativeType = 'sql_native_type',
  DateType = 'date_type',
  TimestampType = 'timestamp_type',
  ArrayType = 'array_type',
  RecordType = 'record_type',
}
export type AtomicType =
  | AtomicTypeWithStringType
  | AtomicTypeWithBooleanType
  | AtomicTypeWithNumberType
  | AtomicTypeWithJSONType
  | AtomicTypeWithSQLNativeType
  | AtomicTypeWithDateType
  | AtomicTypeWithTimestampType
  | AtomicTypeWithArrayType
  | AtomicTypeWithRecordType;
export type AtomicTypeWithStringType = {
  __type: AtomicTypeType.StringType;
  string_type: StringType;
  boolean_type?: undefined;
  number_type?: undefined;
  json_type?: undefined;
  sql_native_type?: undefined;
  date_type?: undefined;
  timestamp_type?: undefined;
  array_type?: undefined;
  record_type?: undefined;
};
export type AtomicTypeWithBooleanType = {
  __type: AtomicTypeType.BooleanType;
  string_type?: undefined;
  boolean_type: BooleanType;
  number_type?: undefined;
  json_type?: undefined;
  sql_native_type?: undefined;
  date_type?: undefined;
  timestamp_type?: undefined;
  array_type?: undefined;
  record_type?: undefined;
};
export type AtomicTypeWithNumberType = {
  __type: AtomicTypeType.NumberType;
  string_type?: undefined;
  boolean_type?: undefined;
  number_type: NumberType;
  json_type?: undefined;
  sql_native_type?: undefined;
  date_type?: undefined;
  timestamp_type?: undefined;
  array_type?: undefined;
  record_type?: undefined;
};
export type AtomicTypeWithJSONType = {
  __type: AtomicTypeType.JSONType;
  string_type?: undefined;
  boolean_type?: undefined;
  number_type?: undefined;
  json_type: JSONType;
  sql_native_type?: undefined;
  date_type?: undefined;
  timestamp_type?: undefined;
  array_type?: undefined;
  record_type?: undefined;
};
export type AtomicTypeWithSQLNativeType = {
  __type: AtomicTypeType.SQLNativeType;
  string_type?: undefined;
  boolean_type?: undefined;
  number_type?: undefined;
  json_type?: undefined;
  sql_native_type: SQLNativeType;
  date_type?: undefined;
  timestamp_type?: undefined;
  array_type?: undefined;
  record_type?: undefined;
};
export type AtomicTypeWithDateType = {
  __type: AtomicTypeType.DateType;
  string_type?: undefined;
  boolean_type?: undefined;
  number_type?: undefined;
  json_type?: undefined;
  sql_native_type?: undefined;
  date_type: DateType;
  timestamp_type?: undefined;
  array_type?: undefined;
  record_type?: undefined;
};
export type AtomicTypeWithTimestampType = {
  __type: AtomicTypeType.TimestampType;
  string_type?: undefined;
  boolean_type?: undefined;
  number_type?: undefined;
  json_type?: undefined;
  sql_native_type?: undefined;
  date_type?: undefined;
  timestamp_type: TimestampType;
  array_type?: undefined;
  record_type?: undefined;
};
export type AtomicTypeWithArrayType = {
  __type: AtomicTypeType.ArrayType;
  string_type?: undefined;
  boolean_type?: undefined;
  number_type?: undefined;
  json_type?: undefined;
  sql_native_type?: undefined;
  date_type?: undefined;
  timestamp_type?: undefined;
  array_type: ArrayType;
  record_type?: undefined;
};
export type AtomicTypeWithRecordType = {
  __type: AtomicTypeType.RecordType;
  string_type?: undefined;
  boolean_type?: undefined;
  number_type?: undefined;
  json_type?: undefined;
  sql_native_type?: undefined;
  date_type?: undefined;
  timestamp_type?: undefined;
  array_type?: undefined;
  record_type: RecordType;
};
export type BooleanCell = {
  boolean_value: boolean;
};
export type BooleanLiteral = {
  boolean_value: boolean;
};
export type BooleanType = {};
export enum CellType {
  StringCell = 'string_cell',
  BooleanCell = 'boolean_cell',
  DateCell = 'date_cell',
  TimestampCell = 'timestamp_cell',
  NumberCell = 'number_cell',
  JSONCell = 'json_cell',
  RecordCell = 'record_cell',
  ArrayCell = 'array_cell',
  TableCell = 'table_cell',
}
export type Cell =
  | CellWithStringCell
  | CellWithBooleanCell
  | CellWithDateCell
  | CellWithTimestampCell
  | CellWithNumberCell
  | CellWithJSONCell
  | CellWithRecordCell
  | CellWithArrayCell
  | CellWithTableCell;
export type CellWithStringCell = {
  __type: CellType.StringCell;
  string_cell: StringCell;
  boolean_cell?: undefined;
  date_cell?: undefined;
  timestamp_cell?: undefined;
  number_cell?: undefined;
  json_cell?: undefined;
  record_cell?: undefined;
  array_cell?: undefined;
  table_cell?: undefined;
};
export type CellWithBooleanCell = {
  __type: CellType.BooleanCell;
  string_cell?: undefined;
  boolean_cell: BooleanCell;
  date_cell?: undefined;
  timestamp_cell?: undefined;
  number_cell?: undefined;
  json_cell?: undefined;
  record_cell?: undefined;
  array_cell?: undefined;
  table_cell?: undefined;
};
export type CellWithDateCell = {
  __type: CellType.DateCell;
  string_cell?: undefined;
  boolean_cell?: undefined;
  date_cell: DateCell;
  timestamp_cell?: undefined;
  number_cell?: undefined;
  json_cell?: undefined;
  record_cell?: undefined;
  array_cell?: undefined;
  table_cell?: undefined;
};
export type CellWithTimestampCell = {
  __type: CellType.TimestampCell;
  string_cell?: undefined;
  boolean_cell?: undefined;
  date_cell?: undefined;
  timestamp_cell: TimestampCell;
  number_cell?: undefined;
  json_cell?: undefined;
  record_cell?: undefined;
  array_cell?: undefined;
  table_cell?: undefined;
};
export type CellWithNumberCell = {
  __type: CellType.NumberCell;
  string_cell?: undefined;
  boolean_cell?: undefined;
  date_cell?: undefined;
  timestamp_cell?: undefined;
  number_cell: NumberCell;
  json_cell?: undefined;
  record_cell?: undefined;
  array_cell?: undefined;
  table_cell?: undefined;
};
export type CellWithJSONCell = {
  __type: CellType.JSONCell;
  string_cell?: undefined;
  boolean_cell?: undefined;
  date_cell?: undefined;
  timestamp_cell?: undefined;
  number_cell?: undefined;
  json_cell: JSONCell;
  record_cell?: undefined;
  array_cell?: undefined;
  table_cell?: undefined;
};
export type CellWithRecordCell = {
  __type: CellType.RecordCell;
  string_cell?: undefined;
  boolean_cell?: undefined;
  date_cell?: undefined;
  timestamp_cell?: undefined;
  number_cell?: undefined;
  json_cell?: undefined;
  record_cell: RecordCell;
  array_cell?: undefined;
  table_cell?: undefined;
};
export type CellWithArrayCell = {
  __type: CellType.ArrayCell;
  string_cell?: undefined;
  boolean_cell?: undefined;
  date_cell?: undefined;
  timestamp_cell?: undefined;
  number_cell?: undefined;
  json_cell?: undefined;
  record_cell?: undefined;
  array_cell: ArrayCell;
  table_cell?: undefined;
};
export type CellWithTableCell = {
  __type: CellType.TableCell;
  string_cell?: undefined;
  boolean_cell?: undefined;
  date_cell?: undefined;
  timestamp_cell?: undefined;
  number_cell?: undefined;
  json_cell?: undefined;
  record_cell?: undefined;
  array_cell?: undefined;
  table_cell: TableCell;
};
export enum DataType {
  Record = 'record',
  Table = 'table',
}
export type Data = DataWithRecord | DataWithTable;
export type DataWithRecord = {
  __type: DataType.Record;
  record: RecordCell;
  table?: undefined;
};
export type DataWithTable = {
  __type: DataType.Table;
  record?: undefined;
  table: Table;
};
export type DateCell = {
  date_value: string;
};
export type DateLiteral = {
  date_value: string;
};
export enum DateTimeframe {
  YEAR = 1,
  QUARTER = 2,
  MONTH = 3,
  WEEK = 4,
  DAY = 5,
}
export type DateType = {
  timeframe?: DateTimeframe;
};
export type DimensionInfo = {
  name: string;
  type: AtomicType;
  tag?: Tag;
  annotations?: Array<Annotation>;
};
export enum ExpressionType {
  Reference = 'reference',
  TimeTruncation = 'time_truncation',
  FilteredField = 'filtered_field',
}
export type Expression =
  | ExpressionWithReference
  | ExpressionWithTimeTruncation
  | ExpressionWithFilteredField;
export type ExpressionWithReference = {
  __type: ExpressionType.Reference;
  reference: Reference;
  time_truncation?: undefined;
  filtered_field?: undefined;
};
export type ExpressionWithTimeTruncation = {
  __type: ExpressionType.TimeTruncation;
  reference?: undefined;
  time_truncation: TimeTruncationFieldReference;
  filtered_field?: undefined;
};
export type ExpressionWithFilteredField = {
  __type: ExpressionType.FilteredField;
  reference?: undefined;
  time_truncation?: undefined;
  filtered_field: FilteredField;
};
export type Field = {
  expression: Expression;
  annotations?: Array<TagOrAnnotation>;
};
export enum FieldInfoType {
  Dimension = 'dimension',
  Measure = 'measure',
  Join = 'join',
  View = 'view',
}
export type FieldInfo =
  | FieldInfoWithDimension
  | FieldInfoWithMeasure
  | FieldInfoWithJoin
  | FieldInfoWithView;
export type FieldInfoWithDimension = {
  __type: FieldInfoType.Dimension;
  dimension: DimensionInfo;
  measure?: undefined;
  join?: undefined;
  view?: undefined;
};
export type FieldInfoWithMeasure = {
  __type: FieldInfoType.Measure;
  dimension?: undefined;
  measure: MeasureInfo;
  join?: undefined;
  view?: undefined;
};
export type FieldInfoWithJoin = {
  __type: FieldInfoType.Join;
  dimension?: undefined;
  measure?: undefined;
  join: JoinInfo;
  view?: undefined;
};
export type FieldInfoWithView = {
  __type: FieldInfoType.View;
  dimension?: undefined;
  measure?: undefined;
  join?: undefined;
  view: ViewInfo;
};
export type FilterStringApplication = {
  field: Reference;
  filter: string;
};
export type FilteredField = {
  reference: Reference;
  filter: WhereItem;
};
export type GroupBy = {
  items: Array<GroupByItem>;
  annotations?: Array<TagOrAnnotation>;
};
export type GroupByItem = {
  name?: string;
  field: Field;
};
export type JSONCell = {
  json_value: string;
};
export type JSONType = {};
export type JoinInfo = {
  name: string;
  schema: Schema;
  tag?: Tag;
  annotations?: Array<Annotation>;
  relationship: Relationship;
};
export type Limit = {
  limit: number;
};
export enum LiteralValueType {
  StringLiteral = 'string_literal',
  NumberLiteral = 'number_literal',
  DateLiteral = 'date_literal',
  TimestampLiteral = 'timestamp_literal',
  BooleanLiteral = 'boolean_literal',
  NullLiteral = 'null_literal',
}
export type LiteralValue =
  | LiteralValueWithStringLiteral
  | LiteralValueWithNumberLiteral
  | LiteralValueWithDateLiteral
  | LiteralValueWithTimestampLiteral
  | LiteralValueWithBooleanLiteral
  | LiteralValueWithNullLiteral;
export type LiteralValueWithStringLiteral = {
  __type: LiteralValueType.StringLiteral;
  string_literal: StringLiteral;
  number_literal?: undefined;
  date_literal?: undefined;
  timestamp_literal?: undefined;
  boolean_literal?: undefined;
  null_literal?: undefined;
};
export type LiteralValueWithNumberLiteral = {
  __type: LiteralValueType.NumberLiteral;
  string_literal?: undefined;
  number_literal: NumberLiteral;
  date_literal?: undefined;
  timestamp_literal?: undefined;
  boolean_literal?: undefined;
  null_literal?: undefined;
};
export type LiteralValueWithDateLiteral = {
  __type: LiteralValueType.DateLiteral;
  string_literal?: undefined;
  number_literal?: undefined;
  date_literal: DateLiteral;
  timestamp_literal?: undefined;
  boolean_literal?: undefined;
  null_literal?: undefined;
};
export type LiteralValueWithTimestampLiteral = {
  __type: LiteralValueType.TimestampLiteral;
  string_literal?: undefined;
  number_literal?: undefined;
  date_literal?: undefined;
  timestamp_literal: TimestampLiteral;
  boolean_literal?: undefined;
  null_literal?: undefined;
};
export type LiteralValueWithBooleanLiteral = {
  __type: LiteralValueType.BooleanLiteral;
  string_literal?: undefined;
  number_literal?: undefined;
  date_literal?: undefined;
  timestamp_literal?: undefined;
  boolean_literal: BooleanLiteral;
  null_literal?: undefined;
};
export type LiteralValueWithNullLiteral = {
  __type: LiteralValueType.NullLiteral;
  string_literal?: undefined;
  number_literal?: undefined;
  date_literal?: undefined;
  timestamp_literal?: undefined;
  boolean_literal?: undefined;
  null_literal: NullLiteral;
};
export type Location = {
  url: string;
  range: Range;
};
export type MeasureInfo = {
  name: string;
  type: AtomicType;
  tag?: Tag;
  annotations?: Array<Annotation>;
};
export enum ModelEntryValueType {
  Source = 'source',
  Query = 'query',
}
export type ModelEntryValue =
  | ModelEntryValueWithSource
  | ModelEntryValueWithQuery;
export type ModelEntryValueWithSource = {
  __type: ModelEntryValueType.Source;
  source: SourceInfo;
  query?: undefined;
};
export type ModelEntryValueWithQuery = {
  __type: ModelEntryValueType.Query;
  source?: undefined;
  query: QueryInfo;
};
export type ModelInfo = {
  entries: Array<ModelEntryValue>;
  tag?: Tag;
  annotations?: Array<Annotation>;
  anonymous_queries: Array<QueryInfo>;
};
export type Nest = {
  items: Array<NestItem>;
  annotations?: Array<TagOrAnnotation>;
};
export type NestItem = {
  name?: string;
  view: View;
};
export type NullLiteral = {};
export type NumberCell = {
  number_value: number;
};
export type NumberLiteral = {
  number_value: number;
};
export enum NumberSubtype {
  INTEGER = 1,
  DECIMAL = 2,
}
export type NumberType = {
  subtype?: NumberSubtype;
};
export type OrderBy = {
  items: Array<OrderByItem>;
};
export enum OrderByDirection {
  ASC = 1,
  DESC = 2,
}
export type OrderByItem = {
  field: Reference;
  direction?: OrderByDirection;
};
export type ParameterValue = {
  name: string;
  value: LiteralValue;
};
export type PipeStage = {
  refinements: Array<Refinement>;
};
export type Pipeline = {
  stages: Array<PipeStage>;
};
export type Position = {
  line: number;
  character: number;
};
export type Query = {
  source?: Reference;
  pipeline: Pipeline;
  annotations?: Array<TagOrAnnotation>;
};
export type QueryInfo = {
  name: string;
  schema: Schema;
  tag?: Tag;
  annotations?: Array<Annotation>;
  definition?: Query;
  code?: string;
  location?: Location;
};
export type Range = {
  start: Position;
  end: Position;
};
export type RecordCell = {
  record_value: Array<Cell>;
};
export type RecordType = {
  fields: Array<DimensionInfo>;
};
export type Reference = {
  name: string;
  parameters?: Array<ParameterValue>;
};
export enum RefinementType {
  Reference = 'reference',
  Segment = 'segment',
}
export type Refinement = RefinementWithReference | RefinementWithSegment;
export type RefinementWithReference = {
  __type: RefinementType.Reference;
  reference: Reference;
  segment?: undefined;
};
export type RefinementWithSegment = {
  __type: RefinementType.Segment;
  reference?: undefined;
  segment: Segment;
};
export enum Relationship {
  ONE = 1,
  MANY = 2,
  CROSS = 3,
}
export type Result = {
  data?: Data;
  schema: Schema;
  sql?: string;
};
export type Row = {
  cells: Array<Cell>;
};
export type SQLNativeType = {
  sql_type?: string;
};
export type Schema = {
  fields: Array<FieldInfo>;
};
export type Segment = {
  operations: Array<ViewOperation>;
};
export type SourceInfo = {
  name: string;
  schema: Schema;
  tag?: Tag;
  annotations?: Array<Annotation>;
};
export type StringCell = {
  string_value: string;
};
export type StringLiteral = {
  string_value: string;
};
export type StringType = {};
export type Table = {
  rows: Array<Row>;
};
export type TableCell = {
  table_value: Table;
};
export type Tag = {
  prefix?: string;
  value?: TagValue;
  properties?: Array<TagProperty>;
};
export enum TagOrAnnotationType {
  Tag = 'tag',
  Annotation = 'annotation',
}
export type TagOrAnnotation =
  | TagOrAnnotationWithTag
  | TagOrAnnotationWithAnnotation;
export type TagOrAnnotationWithTag = {
  __type: TagOrAnnotationType.Tag;
  tag: Tag;
  annotation?: undefined;
};
export type TagOrAnnotationWithAnnotation = {
  __type: TagOrAnnotationType.Annotation;
  tag?: undefined;
  annotation: Annotation;
};
export type TagProperty = {
  name: string;
  value: Tag;
};
export enum TagValueType {
  StringValue = 'string_value',
  ArrayValue = 'array_value',
}
export type TagValue = TagValueWithStringValue | TagValueWithArrayValue;
export type TagValueWithStringValue = {
  __type: TagValueType.StringValue;
  string_value: string;
  array_value?: undefined;
};
export type TagValueWithArrayValue = {
  __type: TagValueType.ArrayValue;
  string_value?: undefined;
  array_value: Array<Tag>;
};
export type TimeTruncationFieldReference = {
  reference: Reference;
  truncation: TimestampTimeframe;
};
export type TimestampCell = {
  timestamp_value: string;
};
export type TimestampLiteral = {
  timestamp_value: string;
};
export enum TimestampTimeframe {
  YEAR = 1,
  QUARTER = 2,
  MONTH = 3,
  WEEK = 4,
  DAY = 5,
  HOUR = 6,
  MINUTE = 7,
  SECOND = 8,
}
export type TimestampType = {
  timeframe?: TimestampTimeframe;
};
export type View = {
  pipeline: Pipeline;
  annotations?: Array<TagOrAnnotation>;
};
export type ViewInfo = {
  name: string;
  schema: Schema;
  tag?: Tag;
  annotations?: Array<Annotation>;
  definition?: View;
};
export enum ViewOperationType {
  GroupBy = 'group_by',
  Aggregate = 'aggregate',
  OrderBy = 'order_by',
  Limit = 'limit',
  Where = 'where',
  Nest = 'nest',
}
export type ViewOperation =
  | ViewOperationWithGroupBy
  | ViewOperationWithAggregate
  | ViewOperationWithOrderBy
  | ViewOperationWithLimit
  | ViewOperationWithWhere
  | ViewOperationWithNest;
export type ViewOperationWithGroupBy = {
  __type: ViewOperationType.GroupBy;
  group_by: GroupBy;
  aggregate?: undefined;
  order_by?: undefined;
  limit?: undefined;
  where?: undefined;
  nest?: undefined;
};
export type ViewOperationWithAggregate = {
  __type: ViewOperationType.Aggregate;
  group_by?: undefined;
  aggregate: Aggregate;
  order_by?: undefined;
  limit?: undefined;
  where?: undefined;
  nest?: undefined;
};
export type ViewOperationWithOrderBy = {
  __type: ViewOperationType.OrderBy;
  group_by?: undefined;
  aggregate?: undefined;
  order_by: OrderBy;
  limit?: undefined;
  where?: undefined;
  nest?: undefined;
};
export type ViewOperationWithLimit = {
  __type: ViewOperationType.Limit;
  group_by?: undefined;
  aggregate?: undefined;
  order_by?: undefined;
  limit: Limit;
  where?: undefined;
  nest?: undefined;
};
export type ViewOperationWithWhere = {
  __type: ViewOperationType.Where;
  group_by?: undefined;
  aggregate?: undefined;
  order_by?: undefined;
  limit?: undefined;
  where: Where;
  nest?: undefined;
};
export type ViewOperationWithNest = {
  __type: ViewOperationType.Nest;
  group_by?: undefined;
  aggregate?: undefined;
  order_by?: undefined;
  limit?: undefined;
  where?: undefined;
  nest: Nest;
};
export type Where = {
  items: Array<WhereItem>;
};
export enum WhereItemType {
  FilterString = 'filter_string',
}
export type WhereItem = WhereItemWithFilterString;
export type WhereItemWithFilterString = {
  __type: WhereItemType.FilterString;
  filter_string: FilterStringApplication;
};
